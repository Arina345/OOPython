# "---------------------1. Как объявить класс? Как создать экземпляр класса?---------------------"


# Класс описывается с помощью ключевого слова class
class Person:
    pass


# Экземпляр класса
p = Person()
# Сначала указывается имя нового объекта, за которым следует оператор присваивания
# и имя класса с параметрами (как определено в _init_).

#  "---------------------2. Что такое наследование? Приведите пример.---------------------"

# Наследование - это средство переиспользования кода. Т.е. это вынос одинакового кода из разных классов в один родительский класс


class Staff:
    def __init__(self, place, experience, department):
        self.p = place
        self.e = experience
        self.d = department

    def place_worker(self):
        return f"Этот сотрудник принадлежит отделу {self.d}"


class Worker(Staff):
    def __init__(self, place, experience, department, name="Андрей", age=27):
        super().__init__(place, experience, department)
        self.name = name
        self.age = age

    def about_worker(self):
        print(super().place_worker())
        return f"Его зовут {self.name}. Ему {self.age} года."


s = Staff("enteprice", 5, "IT")

w = Worker(s.p, s.e, s.d)
print(w.about_worker())
# print(s.place_worker())

# ---------------------3. Для чего используется полиморфизм?---------------------
# Объекты разных классов с разной внутренней реализацией,
# т.е. программный кодом,могут иметь "Одинаковые методы".
# На самом деле у методов совпадают только имена,а вложенный код в них различен (то,что они делают)


class Cat:
    def __init__(self, name):
        self.name = name

    def song(self):
        return "Мяу"


class Dog:
    def __init__(self, name):
        self.name = name

    def song(self):
        return "Гав"


a = Cat("Мурзик")
b = Dog("Рей")
print(a.song())
print(b.song())


# ---------------------4. Что такое инкапсуляция и сокрытие данных класса?---------------------

# «Инкапсуляция представляет собой способность языка
# реализовывать сокрытие части кода, без необходимости вникания в суть его
# работы.

# С инкапсуляцией тесно связан термин "сокрытие доступа".
# Заключается он в ограничении доступа к атрибутам и методам класса во внешнем коде (за пределами класса).

# ---------------------5. Как скрыть метод или атрибут?---------------------
# атрибуты и методы типа _x - трогать не стоит
# атрибуты и методы типа __x - трогать вне класса недопустимо

# ---------------------6. Что такое super в рамках класса?---------------------
# Функция super () в Python позволяет наследовать базовые классы (они же родительские классы) без необходимости явно ссылаться на базовый класс.
# super позволяет вызывать поведение родительского класса.


# ---------------------7. Для чего нужен метод __init__?-----------------------
# Конструктор класс(инициализтор). С его помощью описывается объект класса.
# Без init все было бы так:


class Student:
    pass


c = Student()
c.age = 20
c.name = "Андрей"
c.surname = "Савельев"

# ---------------------8. Для чего нужен метод __setattr__?---------------------

# Данный метод используется,когда нужно присвоить значение атрибуту или наоборот запретить.


# ---------------------9. Если обратиться к несуществующему атрибуту, то это приведет к ошибке, к какой?---------------------

# Попытка обратиться к несуществующему атрибуту вызывает ошибку AttributeError.
# print(a.age())
